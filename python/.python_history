quit()
import this
quit()
a = ['a', 'b', 'c', 'd', 'e']
a[0:2]
"abcd"[-1]
quit(0
quit()
import subprocess
exit
quit
quit(0
quit()
import sys
import(sys.path)
pirnt(sys.path)
print(sys.path)
quit()
import numpy as np
import tensorflow as tf
a = np.array([-1, -2, -2, 0, 1, -1, 2, 3])
atf = tf.one_hot(tf.clip_by_value(a, -1, 4), 4, on_value=1, off_value=0, axis=1, dtype=tf.int32)
atf
with tf.Session() as sess:
	av = sess.run(atf)
	print(av)
atf = tf.one_hot(a, 4, on_value=1, off_value=0, axis=1, dtype=tf.int32)
with tf.Session() as sess:
	av = sess.run(atf)
	print(av)
quit()
import numpy as np
import tensorflow as tf
overlap_matrix=np.array([[0., 0., 0., 0., 0., 0.], [0.5, 0.45, 0.8, 0.8, 0.7, 0.6], [0., 0.35, 0.45, 0.2, 0.45, 0.1], [0.6, 0.45, 0.9, 0.95, 0.8, 0.9], [0., 0.2, 0.15, 0.1, 0.25, 0.1], [0.6, 0.1, 0.2, 0.4, 0.5, 0.], [0., 0., 0., 0., 0., 0.]])
overlap_matrix=tf.convert_to_tensor(overlap_matrix)
anchors_to_gt=tf.argmax(overlap_matrix, axis=1)
with tf.Session() as sess:
	print(sess.run(anchors_to_gt))
match_indices = tf.convert_to_tensor(np.array([-1, 2, -2, 3, -1, 0, -1]))
anchors_to_gt_mask = tf.one_hot(tf.clip_by_value(match_indices, -1, 6), 6, on_value=1, off_value=0, axis=1, dtype=tf.int32)
with tf.Session() as sess:
	print(sess.run(anchors_to_gt_mask))
quit()
        from tensorflow.python.client import device_lib
from tensorflow.python.client import device_lib
local_device_protos=device_lib.list_local_devices()
local_device_protos
quit()
a = []
a.extend(list(zip(['f', 'f', 'f'], ['mot', 'hai', 'ba'])))
a
a = [0, 6]
import nump as np
np.linspace(0, 6, 2)
import numpy as np
np.linspace(0, 6, 2)
np.linspace(0, 6, 3)
np.linspace(0, 19901, 3)
st = 'bccvds'.encode('utf-8')
type(st)
str = 'bccvds'
type(str)
b'JPEG' == 'JPEG'.encode('utf-8')
b'JPEG' == 'JPEG'
type(b'JPEG')
type('JPEG'.encode('utf-8'))
print(b'JPEG')
print('JPEG'.encode('utf-8'))
import tensorflow as tf
quit()
import tensorflow as tf
with tf.gfile.FastGFile('/mnt/9A743BCF743BAD3F/Lloyd/OneDrive - Hanoi University of Science and Technology/Datasets/CTWD/training-dataset/images/ctw-train-01-of-26/0000174-1.jpg', 'rb') as f:
	image_data = f.read()
type(image_data)
import six
if not isinstance(image_data, six.string_types):
	print('YEs')
one = tf.train.BytesList(value=[image_data])
type(one)
two = tf.train.Feature(bytes_list=one)
type(one)
type(two)
object3 = features=tf.train.Features(feature={'image/encoded': two})
type(object3)
example =     #                   |
    #                  \/
example = tf.train.Example(features=object3)
type(example)
serialized_example = example.SerializeToString()
type(serialized_example)
serialized_example
tf.parse_single_example(serialized_example)
tf.parse_single_example(serialized_example, features={'key': tf.FixedLenFeature([], tf.string, default_value="")})
oke = tf.parse_single_example(serialized_example, features={'key': tf.FixedLenFeature([], tf.string, default_value="")})
type(oke)
oke
type(example)
import tensorflow as tf
filename_queue = tf.train.string_input_producer(["/mnt/9A743BCF743BAD3F/Lloyd/OneDrive - Hanoi University of Science and Technology/DellDocuments/Python/Project_Ubuntu/ML_TextBoxes++/dataset/ctwd/tfrecords"], num_epochs=1)
reader = tf.TFRecordReader()
key, serialized_example = reader.read(filename_queue)
key
quit()
import tensorflow as tf
quit()
import tensorflow as tf
filename_queue = tf.train.string_input_producer(["train-00000-of-00128.tfrecord"], num_epochs=1)
reader = tf.TFRecordReader()
    autocmd FileType python inoremap <buffer> <localleader>e <esc>:!python %<cr>
key, serialized_example = reader.read(filename_queue)
key
serialized_example
parsed_example = tf.parse_single_example(serialized_example, {"feature_name_1": tf.FixedLenFeature(shape=[1], dtype=tf.int64), "feature_name_2": tf.FixedLenFeature(shape=[1], dtype=tf.float32)})
with tf.Session() as sess:
	sess.run(tf.initialize_local_variables())
	tf.train.start_queue_runners()
	try:
		while True:
			data_batch = sess.run(parsed_batch.values())
	except tf.errors.OutOfRangeError:
		pass
with tf.Session() as sess:
	sess.run(tf.initialize_local_variables())
	tf.train.start_queue_runners()
	try:
		while True:
			data_batch = sess.run(parsed_example.values())
	except tf.errors.OutOfRangeError:
		pass
quit(0
quit()
import glob
import os
files = os.listdir()
files
hs = []
ws = []
for file in files:
	with open(file, 'r') as f:
		info = f.read()
		print(info)
for file in files:
	with open(file, 'r') as f:
		info = f.read()
		print(type(info))
import json
for file in files:
	with open(file, 'r') as f:
		data = json.load(f)
		print(f)
for file in files:
	with open(file, 'r') as f:
		data = json.loads(f)
		print(type(data))
for file in files:
	with open(file, 'r') as f:
		data = json.load(f)
		print(type(data))
for file in files:
	with open(file, 'r') as f:
		data = json.load(f)
		for text_line in data['text_lines']:
			x, y, w, h = text_line['standing_bbox']
			ws = ws.append(w)
			hw = hs.append(h)
print(
print('min w: ', min(ws))
ws
for file in files:
	with open(file, 'r') as f:
		data = json.load(f)
		for text_line in data['text_lines']:
			x, y, w, h = text_line['standing_bbox']
			print(w)
for file in files:
	with open(file, 'r') as f:
		data = json.load(f)
		for text_line in data['text_lines']:
			x, y, w, h = text_line['standing_bbox']
			ws.append(w)
			hs.append(h)
print(min(ws))
ws
w
h
for file in files:\
for file in files:
	with open(file, 'r') as f:
		data = json.load(f)
		for text_line in data['text_lines']:
			x, y, w, h = text_line['standing_bbox']
			ws.append(w)
			hs.append(h)
		print(ws)
ws
ws = []
hs = []
for file in files:
	with open(file, 'r') as f:
		data = json.load(f)
		for text_line in data['text_lines']:
			x, y, w, h = text_line['standing_bbox']
			ws.append(w)
			hs.append(h)
print(min(ws))
lt = [1, 2, 3, 4]
min(lt)
print(min(lt))
ws
quit()
st = 'val-*'
st[:-2]
quit()
import collections
poly = [[1, 4], [3, 4], [3, 1], [1, 1]]
poly
rotated = collections.deque(poly)
rotated
type(rotated)
rotated.rotate(1)
rotated
t = list(rotated)
t
quit()
from shapely.geometry import Polygon
quit()
from shapely.geometry import Polygon
p1 = Polygon([(0,0), (1,1), (1,0)])
p2 = Polygon([(0,1), (1,0), (1,1)])
print(p1.intersects(p2))
print(p.intersection(q).area)
print(p1.intersection(p2).area)
print(p1.intersection(p2))
list(p1.intersection(p2))
x = p1.intersection(p2)
x[0]
list(x)
x.coords
x.convex_hull
y = x.convex_hull
y
print(y)
quit()
import pathlib
pathlib.Path.cwd()
quit()
a = set.union(['a'], ['a', 'b'], ['b', 'c'])
a = [['a'], ['a', 'b'], ['b', 'c']]
r = set.union(*[set(e) for e in a])
r
quit(0
quit()
a = [['a'], ['b', 'c'], ['a', 'c']]
r = set.union(*[set(e) for e in a])
r
list(r)
quit()
import json
with open('0000172.json', 'r') as f:
	parsed = json.load(f)
	print(json.dumps(parsed, indent=4, sort_keys=True))
quit()
import json
with open('0000172_0.json', 'r') as f:
	parsed = json.load(f)
	print(json.dumps(parsed, indent=4, sort_keys=True))
quit()
import json
with open('0000172_0.json', 'r') as f:
	parsed = json.load(f)
	print(json.dumps(parsed, indent=4, sort_keys=True))
quit()
import json
with open('0000172_0.json', 'r') as f:
	parsed = json.load(f)
	print(json.dumps(parsed, indent=4, sort_keys=True))
a = ["a", "b", "c"]
b = ["b", "c"]
c = ["b", "d"]
list(set(a).intersection(set(b))) == b
list(set(a).intersection(set(b)))
list(set(a).intersection(set(c)))
list(set(a).intersection(set(c))) == c
['b', 'c'] == ['c', 'b']
{'b', 'c'} == {'c', 'b'}
{'b', 'c'} == {'c', 'c'}
set(a).intersection(set(c))
set(a).intersection(set(c)) == set(c)
set(c)
with open('0000172_0.json', 'r') as f:
	parsed = json.load(f)
	print(json.dumps(parsed, indent=4, sort_keys=True))
quit()
from pathlib import Path
destination = Path('./json_annotations')
destination = Path('./json_annotations').resolve()
destination
destination = Path('./json_annotations')
destination
quit()
assert not 5 % 2
assert not 4 % 2
quit()
a = [1, 2, 3, 4, 5, 6, 7]
import numpy as np
a = [1, 2, 1, 4, 7, 6, 9]
list_of_ends = np.linspace(a[0], a[1], 3)
list_of_ends
list_of_ends = np.linspace(0, len(a)-1, 3)
list_of_ends
a[list_of_ends[0]:list_of_ends[1]]
list_of_ends = [int(e) for e in np.linspace(0, len(a)-1, 3)]
a[list_of_ends[0]:list_of_ends[1]]
a[list_of_ends[1]:list_of_ends[2]]
list(zip([1, 2, 3], [4, 5, 6]))
list_of_ends = np.linspace(0, len(a), 3)
list_of_ends
len(a)
sum([1, 2, 3, 4])
quit()
import tensorflow as tf
a = tf.ones([4, 5])
a.name
a
a.device
a.dtype
a.graph
a.op
a.OVERLOADABLE_OPERATORS
a.value_index
quit(0
quit()
import tensorflow as tf
a = tf.ones([4, 5])
a
b = tf.shape(a)
with tf.Session as sess:
	sess.run(b)
with tf.Session() as sess:
	sess.run(b)
with tf.Session() as sess:
	sess.run(b).to_list()
	list(sess.run(b))
with tf.Session() as sess:
	list(sess.run(b))
quit()
with tf.Session() as sess:
import tensorflow as tf
a = tf.ones([4, 5])
a.shape
a.shape.to_list()
list(a.shape)
a.get_shape()
a.shape = [4, 5]
a.shape == [4, 5]
a
quit()
quit(0
quit()
3 % 5
6 % 5
quit()
import tensorflow as tf
a = tf.Variable([1], dtype=tf.float32)
a
a.name
a.op.name
a.op
a
a.op.outputs
type(a)
x1 = tf.Variable([[0, 1], [2, 3]])
print(x1.get_shape())
x1 = tf.reshape(x1, [4, 1])
print(x1.get_shape())
x1.set_shape([4, 1])
print(x1.get_shape())
x1 = x1.set_shape([4, 1])
print(x1.get_shape())
import json
parsed = json.load('~/Projects/OneDriveHUST/DellDocuments/Python/Project_Ubuntu/ML_TextBoxes++/dataset/rctw/RCTW_p2/json_annotations/train/part1/image_0.json')
with open('~/Projects/OneDriveHUST/DellDocuments/Python/Project_Ubuntu/ML_TextBoxes++/dataset/rctw/RCTW_p2/json_annotations/train/part1/image_0.json', 'r') as f:
	parsed = json.load(f)
	print(json.dumps(parsed, indent=4, sort_keys=True))
with open('/home/loinguyenvan/Projects/OneDriveHUST/DellDocuments/Python/Project_Ubuntu/ML_TextBoxes++/dataset/rctw/RCTW_p2/json_annotations/train/part1/image_0.json', 'r') as f:
	parsed = json.load(f)
	print(json.dumps(parsed, indent=4, sort_keys=True))
quit()
from pathlib import Path
quit()
from pathlib import Path
a = Path('./dataset/rctw/RCTW_p2')
a
a.resolve()
import numpy as np
a = np.array([])
a.shape
a.append(1)
numpy.append(a, 1)
np.append(a, 1)
np.append(a, 2)
a.append(a, 1)
a = [1, 2, 3]
np.array(a)
quit()
import neovim
quit()
import cv2
quit()
a = [ 4, 3, 2, 1]
sorted(a)
import numpy as np
np.logspace(-1, 1, 20)
10 ** np.linspace(-1, 1, 20)
import random
random.randint(0, 5)
random.rand(0, 5)
random.uniform(0, 5)
import numpy as np
np.random.uniform(0, 5)
from shapely.geometry import Polygon
patch = Polygon([[1, 1], [4, 1], [4, 4], [1, 4]])
mot = Polygon([[2, 3], [3, 3], [3, 4], [2, 4]])
hai = Polygon([[2, 2], [3, 2], [3, 3], [2, 3]])
ba = Polygon([[3, 2], [5, 2], [5, 3], [3, 3]])
patch.intersects(mot)
patch.intersects(hai)
patch.intersects(ba)
bon = Polygon([[2, 5], [3, 5], [3, 6], [2, 6]])
patch.intersects(bon)
mot.intersects(patch)
hai.intersects(patch)
ba.intersects(patch)
bon.intersects(patch)
bon.within(patch)
ba.within(patch)
hai.within(patch)
mot.within(patch)
a = [1, 2]
a - 1
np.array(a) - 1
import numpy as np
np.array(a) - 1
ar = np.array([[1, 2], [3, 4]])
list(ar)
ar
for e in ar:
	type(e)
for e in ar:
	print(e)
import numpy as np
a = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])
b = [1, 2]
a - b
[list(e) for e in (a - b)]
from shapely.geometry import Polygon
st = 'srdfd'
st.replace('r', 'haha')
st
a = []
a.extend([1, 2])
a
a.extend([1, 2])
a
import numpy as np
list(np.linspace(1, 10, 100))
type(list(np.linspace(1, 10, 100)))
list(np.linspace(1, 10, 20))
len(list(np.linspace(1, 10, 20)))
len(list(np.linspace(10, 1, 20)))
list(np.linspace(10, 1, 20))
sum([1, 23, 3])
import random
random.sample([1, 2, [3, 4], 5], 2)
[5, 4].pop()
[5, 4][:-1]
a = [[1, 2], [3, 4]]
a[0].pop()
a
random.sample([1, 2, [3, 4], 5], 1)
[5][-1]
random.sample([1, 2, [3, 4], 5], 1)[0]
a = [1, 2, 3, 4]
a.pop(2)
a = [1, 2, 34, 5]
for e in a:
	print(e)
expand_direction = [0, 1, 2, 3]
import random
random.shuffle(expand_direction
random.shuffle(expand_direction)
expand_direction
random.shuffle(expand_direction)
expand_direction
expand_direction.pop()
random.shuffle(expand_direction)
expand_direction
expand_direction.pop()
expand_direction
random.shuffle(expand_direction)
expand_direction
random.shuffle(expand_direction)
expand_direction
[0, 2].remove(2)
a
a.remove(2)
a
a.remove(34)
a
if []:
	print('no print')
if [4]:
	print('print')
for i in range(4):
	print(i)
import numpy as np
np.max(np.array([5,3,9,10,2,1]))
import numpy as np
a = np.array([[1, 2], [3, 4]])
a.shape
a.size
b = np.array([])
b.shape
b.size
d = [{'a': 1, 'b': 1}, {'a': 2, 'b': 3}]
for e in zip(*d):
	print(e)
a, b, c, d = [1, 2, 3, 4]
a
a = 4
a
l = [1, 2, 3, 4]
a, b, c, d = [1, 2, 3, 4]
a
a = 4
a
l
a = [i for i in range(4)]
i
a
s = 'foo123bar'
'123' in s
s.find('123')
s.index('123')
import re
re.search('123', s)
if re.search('123', s):
	print('Sure')
a = re.search('123', s)
a
a.string
a.re
a.span()
a.regs
a.end()
a.endpos
a.group()
a.groupdict()
a.groups()
a.group()
re.search('1.3', '123fsfdsfdf153gfdfg103')
re.group()
a = re.search('1.3', '123fsfdsfdf153gfdfg103')
a.group()
a.groups()
a.groupdict()
re.search('[-abc]', 'a-123124')
re.search('[abc-]', 'a-123124')
import PIL.Image
img = PIL.Image.open('/home/loinguyenvan/Projects/OneDriveHUST/Datasets/RCTW/icdar2017rctw_train_v1.2/train/part6/image_6063.jpg')
exif_data = img._getexif()
exif_data
from PIL import Image, ExifTags
img = Image.open("sample.jpg")
img = Image.open("/home/loinguyenvan/Projects/OneDriveHUST/Datasets/RCTW/icdar2017rctw_train_v1.2/train/part6/image_6063.jpg")
img_exif = img.getexif()
print(type(img_exif))
img = Image.open("/home/loinguyenvan/Projects/OneDriveHUST/Datasets/RCTW/icdar2017rctw_train_v1.2/train/part6/image_6062.jpg")
img_exif = img.getexif()
print(type(img_exif))
img = Image.open("/home/loinguyenvan/Projects/OneDriveHUST/Datasets/RCTW/icdar2017rctw_train_v1.2/train/part6/image_6063.jpg")
img_exif = img.getexif()
print(type(img_exif))
img_exif_dict = dict(img_exif)
img_exif_dict
for key, val in img_exif_dict.items():
	if key in ExifTags.TAGS:
		print(f"{ExifTags.TAGS[key]}:{repr(val)}")
print(ExifTags.TAGS)
for k, v in ExifTags.TAGS:
	if v = 'Orientation':
for k, v in ExifTags.TAGS:
	if v == 'Orientation':
		print(k, v)
for k, v in ExifTags.TAGS.items():
	if v == 'Orientation':
		print(k, v)
import cv2
cv2.__version__
re.search(r'\bfoo', 'fdsfdfoo')
re.search(r'\Bfoo', 'fdsfdfoo')
re.search(r'\Bfoo', 'fdsfood')
re.search(r'\Bfoo', 'foofdsfod')
re.search(r'\Bfoo\B', 'foofdsfod')
re.search(r'foo\B', 'foofdsfod')
re.search('x{-4,5}y', 'xxxxy')
re.search('x{-4,5}y', 'xxxxy{-4,5}')
re.search('x{-4,5}y', 'xxxxyx{-4,5}y')
re.search('x{0,5}y', 'xxxxyx{-4,5}y')
re.search('x{0,5}?y', 'xxxxyx{-4,5}y')
re.search('x{0,5}y?', 'xxxxyx{-4,5}y')
re.search('x{0,5}?y', 'xxxxyx{-4,5}y')
re.search('x{0,5}?y', 'xyxxxxyx{-4,5}y')
re.search('x{0,5}y', 'xyxxxxyx{-4,5}y')
re.search('x{0,5}y?', 'xxxxyx{-4,5}y')
re.search('x{0,5}?y', 'xxxxyx{-4,5}y')
re.search('x{0,5}?', 'xxxxyx{-4,5}y')
re.search('x{0,5}', 'xxxxyx{-4,5}y')
re.search('x{0,5}y', 'xxxxyx{-4,5}y')
re.search('x{0,5}?y', 'xxxxyx{-4,5}y')
m = re.search('(\w+),(\w+),(\w+)', 'foo,qureef,fsdfdsf')
m
m.groups()
type(m.groups())
m.group(0)
m.group(1)
m.group(2)
m.group(3)
m.group(4)
m.group(-1)
m.group()
m.group(0)
m.group(1, 2, 0)
m.group(1, 2, 3, 4)
m.group(1, 2, 3)
m.group(1, 2, 3) == m.groups()
regex = r'(\w+),\1'
m = re.search(regex, 'foo,foo')
m.groups
m.groups()
m.group()
m.groups(0)
m.group(0)
m.group(1)
m.group(2)
re.search('a+', 'aaaAAA', re.I)
re.search('A+', 'aaaAAA', re.IGNORECASE)
re.search('[a-z]+', 'aBcDeF')
re.search('[a-z]+', 'aBcDeF', re.IGNORECASE)
s = 'foo\nbar\nbaz'
print(s)
re.search('^foo', s, re.MULTILINE)
re.search('^bar', s, re.MULTILINE)
re.search('^baz', s, re.MULTILINE)
re.search('foo.bar', 'foo\nbar')
re.search('foo.bar', 'foo\nbar', re.DOTALL)
re.match(r'\d+', 'foo123bar')
re.match(r'\d+', '123foo123bar')
s = 'foo\nbar\nbaz'
re.match('^bar', s, re.MULTILINE)
re.findall(r'\w+', '...fo,,,,bar:%$baz//|')
a = [1, 4, 65, 2, 3, 7, 2, 6, 2, 1, 0]
sorted(a)
import re
name = 'image_1233.jpg'
name
re.findall(r'(?<=_)\d+(?=.)', name)
re.findall(r'(?<=_)\d+(?=.)', name)[0]
int(re.findall(r'(?<=_)\d+(?=.)', name)[0])
a = [1, 2, 3, 4]
x, y, w, h = a
for x, y, w, h in a:
	print(x)
for x, y, w, h in tuple(a):
	print(x)
import numpy as np
np.linspace(-1, -5, 10)
from shapely.geometry import Polygon
a = Polygon([[0, 0], [3, 0], [3, 3], [0, 3]])
b = Polygon([[2, 1], [3, 2], [2, 3], [1, 2]])
b.within(a)
a.intersect(b)
a.intersects(b)
c = Polygon([[4, 3], [5, 4], [4, 5], [3, 4]])
a.intersects(c)
c.within(a)
d = Polygon([[3, 2], [4, 3], [3, 4], [2, 3]])
d.intersects(a)
d.within(a)
zip(*([[1, 2], [3], [4, 5], [5, 7]])
a, b =
a, b =zip(*([[1, 2], [3], [4, 5], [5, 7]])
a, b = zip(*([[1, 2], [3], [4, 5], [5, 7]]))
a, b = zip(*([[1, 2], [3, 10], [4, 5], [5, 7]]))
a
b
a = [1, 2, 3, 4, 5]
b = a
b[1] = 100
a
b.pop()
a
b = [e for e in a]
b
b.pop()
b'
b
a
from shapely.geometry import Polygon
p = Polygon([[1, 1], [1, 1], [1, 1], [1, 1]])
p.area
import tensorflow as tf
a = tf.random.uniform(shape=[], minval=2., maxval=3., dtype=tf.int32, seed=10)
a = tf.random.uniform(shape=[], minval=2., maxval=3., dtype=tf.float32, seed=10)
sess = tf.Session()
sess.run([a])
from shapely.geometry import Polygon
a = Polygon([[1, 1], [1, 2], [2, 1], [2, 2]])
a.bounds
a.coords
a.exterior.coords
a.exterior.coords[:]
a.exterior.coords[:-1]
p1 = Polygon([[1, 1], [3, 1], [3, 3], [1, 3]])
p2 = Polygon([[2, 2], [5, 2], [5, 5], [2, 5]])
p3 = p1.union(p2)
p3.exterior.coords[:-1]
p3 = Polygon([[6, 3], [7, 3], [7, 4], [6, 4]])
p4 = p1.union(p2, p3)
p4 = p1.union(p2).union(p3)
p4.exterior.coords[:-1]
p4 = p1.union(p2)
p4 = p4.union(p3)
p4.exterior.coords[:-1]
p4 = p1.union(p2)
p4.exterior.coords[:-1]
p3 = Polygon([[5, 3], [6, 3], [6, 4], [5, 4]])
p4 = p1.union(p2).union(p3)
p4.exterior.coords[:-1]
p3 = Polygon([[6, 3], [7, 3], [7, 4], [6, 4]])
p4 = p1.union(p2).union(p3)
p4.bounds
x1, y1, x3, y3 = p4.bounds
x1
y1
assert not []
assert not [a]
assert not [3]
round(0.5)
round(0.6)
round(0.5, 1)
round(0.5, 0)
round(0.55, 1)
ceil(0.5)
import math
from math import ceil, floor
ceil(0.5)
ceil(0.1)
floor(0.1)
floor(0.9999)
from shapely import Polygon
from shapely.geometry import Polygon
p1 = Polygon([[810, 0], [1088, 0], [1088, 30], [810, 30]])
p1.area
p2 = Polygon([[308, 30], [2687, 30], [2687, 1519], [308, 1519]])
p1.intersects(p2)
p1.intersection(p2).area
sum([True, False, True])
import tensorflow as t
import tensorflow as tf
tf.Tensor([384, 384])
import numpy as np\
import numpy as np
clear
np.linspace(0., 10. , 3)
np.linspace(0., 10. , 1)
np.linspace(0., 10. , 2)
np.linspace(0., 10. , 3)
np.linspace(0., 10. , 4)
np.linspace(0., 10. , 5)
5/2
4/2
6/2
-7/2
7/2
2/1
1/1
1/0.5
2.0/2.0
3//1
5//2
6//4
9//2
import tensorflow as tf
a = tf.Tensor([6.5])
a
a = tf.constant([6.5])
a
tf.cast(a, tf.int32)
sess = tf.Session())
sess = tf.Session()
sess.run(a)
sess.run(tf.cast(a, tf.int32))
import tensorflow as tf
a = tf.constant([[1, 2], [5, 6]])
b = tf.constant([[6], [5]])
a
b
a * b
sess = tf.Session()
sess.run(a * b)
a
sess.run(a)
sess.run(b)
